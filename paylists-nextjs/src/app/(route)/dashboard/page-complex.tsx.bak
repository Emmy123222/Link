"use client"

import { useState, useEffect } from "react"
import { useApp } from "@/providers/AppProvider"
import { useRouter } from "next/navigation"
import { Button } from "@/components/ui/button"
import { Avatar } from "@/components/avatar"
import { 
  TrendingUp, 
  TrendingDown, 
  Users, 
  FileText, 
  Clock,
  DollarSign,
  AlertCircle,
  CheckCircle,
  Plus,
  ArrowRight,
  Filter,
  Calendar
} from "lucide-react"
import { formatDistanceToNow } from "date-fns"

interface PaymentSummary {
  totalToReceive: number
  totalToPay: number
  overdueReceivables: number
  overduePayables: number
  collectionSuccessRate: number
  paymentSuccessRate: number
}

interface RecentActivity {
  id: string
  type: 'payment_received' | 'invoice_sent' | 'payment_made' | 'invoice_created' | 'document_edited'
  title: string
  description: string
  amount?: number
  user?: any
  created_at: string
  document_id?: string
  document_type?: 'invoice' | 'payment_request'
}

interface CollaborativeDocument {
  id: string
  title: string
  type: 'invoice' | 'payment_request'
  last_edited_by: string
  last_edited_at: string
  last_edited_user: any
  collaborators_count: number
}

export default function Dashboard() {
  const { user } = useApp()!
  const router = useRouter()
  const [paymentSummary, setPaymentSummary] = useState<PaymentSummary>({
    totalToReceive: 0,
    totalToPay: 0,
    overdueReceivables: 0,
    overduePayables: 0,
    collectionSuccessRate: 0,
    paymentSuccessRate: 0,
  })
  const [recentActivity, setRecentActivity] = useState<RecentActivity[]>([])
  const [collaborativeDocuments, setCollaborativeDocuments] = useState<CollaborativeDocument[]>([])
  const [isLoading, setIsLoading] = useState(true)

  // Debug logging
  console.log('Dashboard render - User:', user)
  console.log('Dashboard render - isLoading:', isLoading)

  useEffect(() => {
    console.log('Dashboard useEffect - User changed:', user)
    if (user) {
      loadDashboardData()
    } else {
      // If no user, still show the dashboard with mock data but indicate no user
      console.log('No user found, loading with mock data anyway')
      loadDashboardData()
    }
  }, [user])

  const loadDashboardData = async () => {
    console.log('Loading dashboard data...')
    try {
      await Promise.all([
        loadPaymentSummary(),
        loadRecentActivity(),
        loadCollaborativeDocuments(),
      ])
      console.log('Dashboard data loaded successfully')
    } catch (error) {
      console.error('Error loading dashboard data:', error)
    } finally {
      console.log('Setting isLoading to false')
      setIsLoading(false)
    }
  }

  const loadPaymentSummary = async () => {
    try {
      // Mock data for now - replace with actual API calls
      setPaymentSummary({
        totalToReceive: 15750,
        totalToPay: 3200,
        overdueReceivables: 2,
        overduePayables: 1,
        collectionSuccessRate: 85.5,
        paymentSuccessRate: 92.3,
      })
    } catch (error) {
      console.error('Error loading payment summary:', error)
    }
  }

  const loadRecentActivity = async () => {
    try {
      const activities: RecentActivity[] = [
        {
          id: '1',
          type: 'invoice_sent',
          title: 'Invoice sent',
          description: 'Invoice #INV-001 sent to client@example.com',
          amount: 1500,
          created_at: new Date(Date.now() - 1000 * 60 * 30).toISOString(),
        },
        {
          id: '2',
          type: 'payment_received',
          title: 'Payment received',
          description: 'Payment of $750 received for Invoice #INV-002',
          amount: 750,
          created_at: new Date(Date.now() - 1000 * 60 * 60 * 2).toISOString(),
        },
        {
          id: '3',
          type: 'document_edited',
          title: 'Invoice updated',
          description: 'Invoice #INV-003 was edited',
          created_at: new Date(Date.now() - 1000 * 60 * 60 * 4).toISOString(),
        },
      ]

      setRecentActivity(activities)
    } catch (error) {
      console.error('Error loading recent activity:', error)
    }
  }

  const loadCollaborativeDocuments = async () => {
    try {
      const documents: CollaborativeDocument[] = [
        {
          id: '1',
          title: 'Invoice INV-001',
          type: 'invoice',
          last_edited_by: user?.id || '',
          last_edited_at: new Date(Date.now() - 1000 * 60 * 60).toISOString(),
          last_edited_user: user,
          collaborators_count: 2,
        },
      ]

      setCollaborativeDocuments(documents)
    } catch (error) {
      console.error('Error loading collaborative documents:', error)
    }
  }

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
    }).format(amount)
  }

  const getActivityIcon = (type: RecentActivity['type']) => {
    switch (type) {
      case 'payment_received':
        return <CheckCircle className="h-4 w-4 text-green-500" />
      case 'payment_made':
        return <TrendingDown className="h-4 w-4 text-red-500" />
      case 'invoice_sent':
        return <FileText className="h-4 w-4 text-blue-500" />
      case 'invoice_created':
        return <Plus className="h-4 w-4 text-purple-500" />
      case 'document_edited':
        return <FileText className="h-4 w-4 text-orange-500" />
      default:
        return <FileText className="h-4 w-4 text-gray-500" />
    }
  }

  const getUserDisplayName = (user: any) => {
    if (!user) return 'Unknown'
    if (user.first_name || user.last_name) {
      return `${user.first_name || ''} ${user.last_name || ''}`.trim()
    }
    return user.email
  }

  if (isLoading) {
    console.log('Rendering loading state')
    return (
      <main className="flex-1 p-6">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-200 rounded w-1/4 mb-4"></div>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
            {[1, 2, 3, 4].map((i) => (
              <div key={i} className="bg-white p-6 rounded-lg shadow-sm">
                <div className="h-4 bg-gray-200 rounded w-1/2 mb-2"></div>
                <div className="h-8 bg-gray-200 rounded w-3/4"></div>
              </div>
            ))}
          </div>
          <div className="text-center text-gray-500 mt-8">Loading dashboard...</div>
        </div>
      </main>
    )
  }

  console.log('Rendering main dashboard content')
  return (
    <main className="flex-1 p-6 space-y-8">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Dashboard</h1>
          <p className="text-gray-600">
            Welcome back, {user ? getUserDisplayName(user) : 'Guest User'}
          </p>
        </div>
        <div className="flex gap-2">
          <Button variant="outline" size="sm">
            <Filter className="h-4 w-4 mr-2" />
            Filter
          </Button>
          <Button variant="outline" size="sm">
            <Calendar className="h-4 w-4 mr-2" />
            This Month
          </Button>
        </div>
      </div>

      {/* Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div className="bg-white rounded-lg border border-gray-200 p-6 shadow-sm">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">To Receive</p>
              <p className="text-2xl font-bold text-gray-900">
                {formatCurrency(paymentSummary.totalToReceive)}
              </p>
            </div>
            <div className="p-3 bg-green-100 rounded-full">
              <TrendingUp className="h-6 w-6 text-green-600" />
            </div>
          </div>
          {paymentSummary.overdueReceivables > 0 && (
            <div className="mt-4 flex items-center text-sm text-orange-600">
              <AlertCircle className="h-4 w-4 mr-1" />
              {paymentSummary.overdueReceivables} overdue
            </div>
          )}
        </div>

        <div className="bg-white rounded-lg border border-gray-200 p-6 shadow-sm">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">To Pay</p>
              <p className="text-2xl font-bold text-gray-900">
                {formatCurrency(paymentSummary.totalToPay)}
              </p>
            </div>
            <div className="p-3 bg-red-100 rounded-full">
              <TrendingDown className="h-6 w-6 text-red-600" />
            </div>
          </div>
          {paymentSummary.overduePayables > 0 && (
            <div className="mt-4 flex items-center text-sm text-red-600">
              <AlertCircle className="h-4 w-4 mr-1" />
              {paymentSummary.overduePayables} overdue
            </div>
          )}
        </div>

        <div className="bg-white rounded-lg border border-gray-200 p-6 shadow-sm">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Collection Rate</p>
              <p className="text-2xl font-bold text-gray-900">
                {paymentSummary.collectionSuccessRate.toFixed(1)}%
              </p>
            </div>
            <div className="p-3 bg-blue-100 rounded-full">
              <CheckCircle className="h-6 w-6 text-blue-600" />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg border border-gray-200 p-6 shadow-sm">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm font-medium text-gray-600">Active Collaborations</p>
              <p className="text-2xl font-bold text-gray-900">
                {collaborativeDocuments.length}
              </p>
            </div>
            <div className="p-3 bg-purple-100 rounded-full">
              <Users className="h-6 w-6 text-purple-600" />
            </div>
          </div>
        </div>
      </div>

      {/* Main Content Grid */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Recent Activity */}
        <div className="lg:col-span-2">
          <div className="bg-white rounded-lg border border-gray-200 p-6 shadow-sm">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-lg font-semibold">Recent Activity</h2>
              <Button variant="ghost" size="sm">
                View All
                <ArrowRight className="h-4 w-4 ml-2" />
              </Button>
            </div>
            
            <div className="space-y-4">
              {recentActivity.length === 0 ? (
                <div className="text-center py-8 text-gray-500">
                  <Clock className="h-8 w-8 mx-auto mb-2 opacity-50" />
                  <p>No recent activity</p>
                </div>
              ) : (
                recentActivity.map((activity) => (
                  <div key={activity.id} className="flex items-start gap-4 p-4 hover:bg-gray-50 rounded-lg transition-colors">
                    <div className="mt-1">
                      {getActivityIcon(activity.type)}
                    </div>
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium text-gray-900">
                        {activity.title}
                      </p>
                      <p className="text-sm text-gray-600">
                        {activity.description}
                      </p>
                      <p className="text-xs text-gray-500 mt-1">
                        {formatDistanceToNow(new Date(activity.created_at), { addSuffix: true })}
                      </p>
                    </div>
                    {activity.amount && (
                      <div className="text-sm font-medium text-gray-900">
                        {formatCurrency(activity.amount)}
                      </div>
                    )}
                  </div>
                ))
              )}
            </div>
          </div>
        </div>

        {/* Collaborative Documents */}
        <div>
          <div className="bg-white rounded-lg border border-gray-200 p-6 shadow-sm">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-lg font-semibold">Recent Collaborations</h2>
              <Button variant="ghost" size="sm">
                View All
              </Button>
            </div>
            
            <div className="space-y-4">
              {collaborativeDocuments.length === 0 ? (
                <div className="text-center py-8 text-gray-500">
                  <Users className="h-8 w-8 mx-auto mb-2 opacity-50" />
                  <p>No recent collaborations</p>
                </div>
              ) : (
                collaborativeDocuments.map((doc) => (
                  <div key={doc.id} className="p-3 border rounded-lg hover:bg-gray-50 transition-colors cursor-pointer">
                    <div className="flex items-start justify-between mb-2">
                      <h3 className="text-sm font-medium text-gray-900 truncate">
                        {doc.title}
                      </h3>
                      <span className={`px-2 py-1 text-xs rounded-full ${
                        doc.type === 'invoice' 
                          ? 'bg-blue-100 text-blue-800' 
                          : 'bg-green-100 text-green-800'
                      }`}>
                        {doc.type}
                      </span>
                    </div>
                    
                    <div className="flex items-center gap-2 text-xs text-gray-500">
                      <div className="w-4 h-4 bg-gray-300 rounded-full"></div>
                      <span>
                        Edited by {getUserDisplayName(doc.last_edited_user)}
                      </span>
                    </div>
                    
                    <div className="flex items-center justify-between mt-2">
                      <span className="text-xs text-gray-500">
                        {formatDistanceToNow(new Date(doc.last_edited_at), { addSuffix: true })}
                      </span>
                      <div className="flex items-center gap-1 text-xs text-gray-500">
                        <Users className="h-3 w-3" />
                        <span>{doc.collaborators_count}</span>
                      </div>
                    </div>
                  </div>
                ))
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Quick Actions */}
      <div className="bg-white rounded-lg border border-gray-200 p-6 shadow-sm">
        <h2 className="text-lg font-semibold mb-4">Quick Actions</h2>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <Button 
            variant="outline" 
            className="h-20 flex-col"
            onClick={() => router.push('/invoices/new')}
          >
            <Plus className="h-6 w-6 mb-2" />
            Create Invoice
          </Button>
          <Button 
            variant="outline" 
            className="h-20 flex-col"
            onClick={() => router.push('/payments-out/new')}
          >
            <DollarSign className="h-6 w-6 mb-2" />
            Request Payment
          </Button>
          <Button 
            variant="outline" 
            className="h-20 flex-col"
            onClick={() => router.push('/payments-in')}
          >
            <TrendingUp className="h-6 w-6 mb-2" />
            View Receivables
          </Button>
          <Button 
            variant="outline" 
            className="h-20 flex-col"
            onClick={() => router.push('/payments-out')}
          >
            <TrendingDown className="h-6 w-6 mb-2" />
            View Payables
          </Button>
        </div>
      </div>
    </main>
  )
}
